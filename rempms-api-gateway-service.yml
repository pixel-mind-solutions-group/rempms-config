server:
  port: 8081

spring:
  main:
    web-application-type: reactive

# Connect with the discovery server/eureka server and locate all the details of individual microservices
  cloud:
    gateway:
      server:
        webflux:
          discovery:
            locator:
              # disabled default routing configurations/behaviour
              enabled: false
              lower-case-service-id: true
      httpclient:
        connect-timeout: 10000
        response-timeout: 60000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: "http://localhost:8070/eureka/"
  instance:
    prefer-ip-address: true

#  cloud:
#    consul:
#      host: ${CONSUL_SERVER_ADDRESS:localhost}
#      port: 8500
#      discovery:
#        instanceId: ${spring.application.name}:${random.value}
#        register: true
#        prefer-ip-address: true

#    gateway:
#      routes:
#        - id: iam-service
#          uri: http://localhost:9001
#          predicates:
#            - Path=/api/iam/**
#
#        - id: pdev-keycloak-service
#          uri: lb://pdev-keycloak-service
#          predicates:
#            - Path=/api/kcs/**
#
#        - id: rempms-location-service
#          uri: http://localhost:8084
#          predicates:
#            - Path=/api/location/**
#
#        - id: rempms-communication-service
#          uri: http://localhost:8083
#          predicates:
#            - Path=/api/communication/**
#
#        - id: rempms-recruitment-service
#          uri: http://localhost:8086
#          predicates:
#            - Path=/api/recruitment/**
#
#        - id: rempms-candidate-service
#          uri: http://localhost:8088
#          predicates:
#            - Path=/api/candidate/**
#
#        - id: rempms-document-service
#          uri: http://localhost:8087
#          predicates:
#            - Path=/api/document/**
#
#        - id: rempms-draft-service
#          uri: http://localhost:8085
#          predicates:
#            - Path=/api/draft/**

  openfeign:
    okhttp:
      enabled: true
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

management:
  endpoints:
    web:
      exposure:
        include: "*"

logging:
  level:
    org:
      springframework:
        cloud: DEBUG

# Circuit breaker pattern configuration
resilience4j.circuitbreaker:
  configs:
    default:
      # This defines the number of calls in the sliding window that will be used to calculate the failure rate.
      # In this case, it's 10, so the CircuitBreaker will track the last 10 calls.
      # These calls can be successful or failed, and their outcome determines whether to open the circuit.
      slidingWindowSize: 10
      # This sets the time the circuit will stay open before transitioning to half-open, in milliseconds.
      # Here, 10000 milliseconds = 10 seconds.
      # After this time, the circuit will attempt trial calls as specified by
      waitDurationInOpenState: 10000
      # This defines how many trial calls are allowed when the circuit breaker is in a half-open state.
      # Here, 2 means that when transitioning from open to half-open, it will allow 2 calls.
      # If those calls succeed, the circuit goes to closed; if they fail, it goes back to open.
      permittedNumberOfCallsInHalfOpenState: 2
      # This sets the failure rate threshold as a percentage.
      # If more than 50% of the calls in the sliding window fail, the circuit will open.
      # For example, if 6 out of the last 10 calls fail, the failure rate is 60%, which is above the threshold.
      failureRateThreshold: 50
      # This sets a percentage threshold for how many calls are allowed to be "slow" before the circuit breaker opens.
      # In this case: 50%.
      # If 5 or more out of 10 calls take longer than 10 seconds (based on slowCallDurationThreshold),
      # the circuit will open — even if none of the calls failed.
      slowCallRateThreshold: 50
      # Any call that takes longer than 10,000 milliseconds (10 seconds) to complete is considered a "slow call".
      # This doesn't mean the call has failed — it might still succeed — but it's classified as slow based on this threshold.
      slowCallDurationThreshold: 10000